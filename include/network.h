/**
 * @file network.h
 * @brief Network operations for server-client communication in the game.
 *
 * This file contains the function declarations and global variables
 * for setting up server-client communication, sending and receiving moves,
 * and handling signals.
 */

#ifndef NETWORK_H
#define NETWORK_H

#include <netinet/in.h>
#include "chomp.h"

extern int last_col_played_term_serv;
extern int last_row_played_term_serv;
extern int client_socket;
extern int server_socket;

/**
 * @brief Starts the server on the specified port.
 *
 * This function initializes and starts the server on the given port.
 * It sets up the necessary socket, binds it to the port, and listens
 * for incoming connections.
 *
 * @param port The port number to start the server on.
 * @return The server socket file descriptor.
 */
int start_server (short port);

/**
 * @brief Starts the client and connects to the specified server IP and port.
 *
 * This function initializes the client and connects it to the server
 * specified by the IP address and port number. It sets up the necessary
 * socket and establishes the connection.
 *
 * @param ip The IP address of the server.
 * @param port The port number of the server.
 * @return The client socket file descriptor.
 */
int start_client (const char *ip, short port);

/**
 * @brief Sends a move to the specified socket.
 *
 * This function sends a move to the server or client through the specified
 * socket. It ensures that the move is transmitted correctly.
 *
 * @param socket The socket file descriptor.
 * @param move The move to send.
 * @return 0 on success, -1 on failure.
 */
int send_move (int socket, int move);

/**
 * @brief Receives a move from the specified socket.
 *
 * This function receives a move from the server or client through the specified
 * socket. It ensures that the move is received correctly.
 *
 * @param socket The socket file descriptor.
 * @return The received move, or -1 on failure.
 */
int receive_move (int socket);

/**
 * @brief Handles the client's move.
 *
 * This function processes the move made by the client. It updates the game
 * table and checks if the game is over.
 *
 * @param client_socket The client socket file descriptor.
 * @param table The game table.
 * @param move The move made by the client.
 * @param game_over_flag Pointer to the game over flag.
 */
void handle_client_move (int client_socket, int table[ROWS][COLS], int move, bool *game_over_flag);

/**
 * @brief Validates and applies the move to the game table.
 *
 * This function checks if the move is valid and applies it to the game table.
 * It ensures that the move follows the game rules.
 *
 * @param table The game table.
 * @param move The move to validate and apply.
 * @return true if the move is valid and applied, false otherwise.
 */
bool validate_and_apply_move (int table[ROWS][COLS], int move);

/**
 * @brief Handles the SIGINT signal.
 *
 * This function handles the SIGINT signal (usually generated by pressing
 * Ctrl+C). It performs necessary cleanup and exits the program gracefully.
 *
 * @param sig The signal number.
 */
void handle_sigint (int sig);

/**
 * @brief Sets up the signal handlers.
 *
 * This function sets up the necessary signal handlers for the program.
 * It ensures that signals like SIGINT are handled properly.
 */
void setup_signal_handlers (void);

/**
 * @brief Gets the move from the user.
 *
 * This function prompts the user to enter a move and returns the move
 * entered by the user.
 *
 * @return The move entered by the user.
 */
int get_move (void);

/**
 * @brief Makes a move and sends it to the server.
 *
 * This function makes a move on the game table and sends the move to the
 * server. It ensures that the move is transmitted correctly.
 *
 * @param table The game table.
 * @param move The move to make.
 */
void make_move (int table[ROWS][COLS], int move);

/**
 * @brief Makes a move in the game and sends it over the network.
 *
 * This function attempts to make a move in the game by validating and applying
 * the move to the game table. If the move is valid, it then sends the move to
 * the specified socket.
 *
 * @param table The game table represented as a 2D array of integers.
 * @param move The move to be made, represented as an integer.
 * @param socket The socket descriptor used to send the move over the network.
 * @return true if the move was successfully made and sent, false otherwise.
 */
bool make_ai_move_network(int table[ROWS][COLS],int move,int socket);


extern int client_socket;
extern int server_socket;

#endif /* NETWORK_H */
